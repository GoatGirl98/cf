#include <bits/stdc++.h>
#define watch(x) std::cout << (#x) << " is " << (x) << std::endl
using LL = long long;
// // #include "include/izlyforever.hpp"

// https://www.bookstack.cn/read/CPP-Concurrency-In-Action-2ed-2019/content-chapter8-8.4-chinese.md
template<typename Iterator, typename T>
class AccumulateBlock {
public:
	void operator()(Iterator start, Iterator end, T &r) {
		r = std::accumulate(start, end, r);
	}
};

template<typename Iterator, typename T>
T accumulateParallel(Iterator start, Iterator end, T init) {
	int n = std::distance(start, end);
	if (n == 0) return init;
	int threadsNum = std::thread::hardware_concurrency();
	if (threadsNum == 0) threadsNum = 4;
	int blockSize = n / threadsNum;
	std::vector<T> results(threadsNum);
	std::vector<std::thread> threads(threadsNum - 1);
	Iterator blockStart = start;
	for (int i = 0; i < threads.size(); ++i) {
		Iterator blockEnd = blockStart;
		std::advance(blockEnd, blockSize);
		threads[i] = std::thread(AccumulateBlock<Iterator, T>(), blockStart, blockEnd, std::ref(results[i]));
		blockStart = blockEnd;
	}
	AccumulateBlock<Iterator,T>()(blockStart, end, results.back());
	std::for_each(threads.begin(), threads.end(), std::mem_fn(&std::thread::join));
	return std::accumulate(results.begin(), results.end(), init);
}

int main() {
	freopen("in", "r", stdin);
	std::ios::sync_with_stdio(false);
	std::cin.tie(nullptr);
	watch(RAND_MAX);
	int n;
	std::cin >> n;
	std::vector<int> a(n);
	for (auto &x : a) std::cin >> x;
	
	auto start2 = std::clock();
	auto r2 = std::accumulate(a.begin(), a.end(), 0LL);
	watch(r2);
	std::cout << "Time used: " << (std::clock() - start2) << "ms" << std::endl;

	auto start = std::clock();
	auto r = accumulateParallel(a.begin(), a.end(), 0LL);
	watch(r);
	std::cout << "Time used: " << (std::clock() - start) << "ms" << std::endl;

	return 0;
}

还真能变快！

数据制造：

#include <bits/stdc++.h>
#define watch(x) std::cout << (#x) << " is " << (x) << std::endl
using LL = long long;
#include "include/izlyforever.hpp"

int main() {
	// freopen("C:\\Users\\dna049\\cf\\in", "r", stdin);
	freopen("in", "w", stdout);
	std::ios::sync_with_stdio(false);
	std::cin.tie(nullptr);
	std::srand(std::time(0));
	const int N = 1e7 + 2;
	std::cout << N << '\n';
	for (int i = 0; i < N; ++i) std::cout << rand() << ' ';
	std::cout << '\n';
	return 0;
}